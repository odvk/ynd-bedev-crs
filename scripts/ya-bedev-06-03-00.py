# 3. Стандарт UTC

"""
Есть несколько стандартов измерения и записи времени. Раньше в основном придерживались GMT (англ. «Greenwich Mean Time», среднее время по гринвичскому меридиану). Позже прежний всемирный формат был отменен и приняли новый, определяемый атомными часами. Это UTC — «coordinated universal time» — всемирное координированное время.

У каждой переменной типа данных datetime можно вызвать метод utcnow() (англ. now «сейчас»). Он вернёт текущий момент времени по UTC с эталонной точностью до микросекунд.

"""

import datetime as dt


moment_in_time = dt.datetime(1961, 4, 12, 9, 7, 0)  # снова старт Гагарина

now = moment_in_time.utcnow()
print(now)  # напечатать на экран текущий момент времени

# Более того, метод utcnow() настолько хитрый, что для его вызова необязательно явно создавать объект типа datetime. Можно просто написать:

print(dt.datetime.utcnow())  # будет напечатан текущий момент времени

# Есть тип timedelta (от англ. delta, «промежуток»), в котором можно сохранить определенный промежуток времени. Этот тип тоже живёт в библиотеке dt. А объект такого типа создаётся функцией timedelta():

import datetime as dt


period = dt.timedelta(hours=3) # сохраняем промежуток времени в три часа
print(period)
# 3:00:00

# И прибавляем его к значению времени по UTC:
now = dt.datetime.utcnow()
period = dt.timedelta(hours=3)
    
moscow_moment = now + period
    
print(moscow_moment) # будет напечатано текущее время в Москве (время на 3 часа больше текущего)


"""
Пример:
Победитель Гран-при Австралии чемпионата мира Формулы-1 2019 года, Вале Боттас проехал свой самый быстрый круг за 1 минуту 25 секунд и 273250 микросекунд. Второй результат показал Льюис Хэмилтон с разницей в 208860 микросекунд. Вычислим время самого быстрого круга Хэмилтона.
"""

import datetime as dt

time_bottas = dt.timedelta(minutes=1, seconds=25,
                           microseconds=273250)
time_hamilton = time_bottas + dt.timedelta(microseconds=208860)

print(time_hamilton)

#0:01:25.482110