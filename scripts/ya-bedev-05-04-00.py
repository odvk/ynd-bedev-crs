# 4. Подробнее о форматировании
# В f-строки можно подставлять не только переменные, но и результаты вычислений. Например, арифметические операции:

one_hundred = 100
five_hundred = 500
print(f'{one_hundred} + {five_hundred} = {one_hundred + five_hundred}')
    
one_hundred = 'сто'
five_hundred = 'пятьсот'
print(f'{one_hundred} + {five_hundred} = {one_hundred + five_hundred}')

#100 + 500 = 600
#сто + пятьсот = стопятьсот

# И обращение к элементам списка:
russian_alphabet = ['а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т',
                    'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я']
    
print(f'"{russian_alphabet[-1]}" - последняя буква в алфавите.')
# "я" - последняя буква в алфавите.

#А также к элементам словаря по ключу:
favorite_songs = {
    'Тополиный пух': 'Иванушки international',
    'Город золотой': 'Аквариум',
    'Звезда по имени Солнце': 'Кино'
}

song = 'Город золотой'
print(f'"{song}" - одна из известных пеcен группы "{favorite_songs[song]}".')

# "Город золотой" - одна из известных пеcен группы "Аквариум".

# Хоть Python и позволяет вставлять очень сложные выражения внутрь f-строк, не злоупотребляйте этой возможностью. Иначе получится перегруженный код, в котором будет сложно разобраться. Сравните два эквивалентных примера:

print(f'Корни уравнения равны {(-b + (b**2 - 4*a*c)**(1/2)) / (2*a)} и {(-b - (b**2 - 4*a*c)**(1/2)) / (2*a)}')

# и 
d = b**2 - 4*a*c
x1 = (-b + d**(1/2)) / (2*a)
x2 = (-b - d**(1/2)) / (2*a)
print(f'Корни уравнения равны {x1} и {x2}')

# Лучше придерживаться общего правила: f-строки используются только для форматирования вывода, а вычислять все выражения надо вне их. И вообще, не стоит экономить на количестве строчек кода, принося в жертву его читаемость.








